58
bang
9
# [bang] pass value when clicked 
#                      |
#                    [bang]
#                      |
--decl
inp(1); outp(1)
--code
out0(0)
#df  Pass a value when user click on it
clock
14
# [clock] output its message after one second
#         
#                     *   
#                     |     
#                [ clock  ]
#                     |
--decl
inp(1)
outp(1)
--code
await wait(1000)
out0(0)
#
#df Pass a value one second later
inc
17
# [inc] increment its memory every time 
#        it is triggered
#                          set
#                      |  |
#                    [inc  ]
#                      |
--decl
inp(2)
outp(1)
memset(2)
--code
mem(1)+=1;
out0(1);
#df Increment number each call 
#i0 Call
#i1 Store number
#o0 Out
print
12
# [print] print its memory to browser
#         console
#
#                      |
#                    [log]
#                      
--decl
inp(1);outp(0);
--code
console.log(mem(0))
#df  Output value to browser console
#i0  Call
%
9
--decl
inp(2); outp(1);
--code
mem(0) = mem(0) % mem(1)
out0(0)
#df Ouput modulo of two numbers
#i0 Set first number and call 
#i1 Set second number 
#o0 Out
pipe
17
# [pipe] output its message after a certain time
#         time set in input#2 is in ms
#                 *   time
#                 |     |
#                [ pipe  ]
#                 |
--decl
inp(2)
outp(1)
mem(1)=1000
--code
await wait(mem(1))
out0(0)
#df Pass value after specific amount of time
#i0 Call
#i1 Set delay as milliseconds
#o0 Out
slider
9
# [slider] outputs integer with
#             special interaction
--decl
inp(1); outp(1); memset(3);
mem(2) = 200
--code
out0(0)
#i0 Call
#o0 Out
knob
11
# [knob] outputs integer with
#             special interaction
--decl
inp(1)
outp(1)
memset(3)
mem(2)=200
--code
out0(0)
#i0 Call
#o0 Out
number
9
# [number] outputs integer with
#             a special display
--decl
inp(1)
outp(1)
--code
out0(0)
#i0 Call
#o0 Out
floor
14
# [floor] round a value to its lowest 
#
#                      |
#                    [floor]
#                      |
--decl
inp(1)
outp(1)
--code
mem(0) = Math.floor(mem(0))
out0(0)
#df Round value to its lowest integer
#i0 Call
#o0 Out
/
16
# [ / ] divide a number with
#       divider pass in second entry
#
#	          q   d
#                      |  |
#                    [ /   ]
#                      |
--decl
inp(2); outp(1);
--code
mem(0) /= mem(1)
out0(0)
#df Divide value
#i0 Set quotient and Call 
#i1 Set divider
#o0 Out
switch
13
# [switch] pass or block routine
#              on click, user can set to 0 or I
#	          
#                      |   
#                    [switch]
#                      |
--decl
inp(2)
outp(1)
--code
if (mem(1)==0){out0(0);}
#i0 Call
#o0 Out
rand
23
# [rand]  out a random number 
#            range can be set by passing
#            minimum value at entry 1
#            maximum value at entry 2
#
#                  *  m   mx
#                  |   |   |
#                [rand     ]
#                  |
--decl
inp(3)
outp(1)
mem(1)=0
mem(2)=200
--code
mem(0) = Math.random() * (mem(2)-mem(1))+ mem(1)
mem(0) = Math.floor(mem(0))
out0(0)
#df Output a random number
#i0 Call
#i1 Set minimum
#i2 Set maximum
#o0 Out
**
9
--decl
inp(2); outp(1);
--code
mem(0) = mem(0) ** mem(1)
out0(0)
#df Output power of two numbers
#i0 Set first number and call 
#i1 Set second number 
#o0 Out
+
9
--decl
inp(2); outp(1);
--code
mem(0) += mem(1)
out0(0)
#df Add two numbers
#i0 Set first number and call 
#i1 Set second number 
#o0 Out
-
9
--decl
inp(2); outp(1);
--code
mem(0) -= mem(1)
out0(0)
#df Substract two numbers
#i0 Set first number and call 
#i1 Set second number 
#o0 Out
<
8
--decl
inp(2); outp(2);
--code
if ( mem(0) < mem(1) ){ out0(0);} else{ out1(0)}
#df Out left if number below value, else out right
#i0 Call 
#i1 Set value to compare
#o0 Out
>
8
--decl
inp(2); outp(2);
--code
if ( mem(0) > mem(1) ){ out0(0);}else{ out1(0)}
#df Out left if number above value, else out right
#i0 Call 
#i1 Set value to compare
#o0 Out
*
9
--decl
inp(2); outp(1);
--code
mem(0) *= mem(1)
out0(0)
#df Multiply two numbers
#i0 Set first number and call 
#i1 Set second number 
#o0 Out
>=
8
--decl
inp(2); outp(2);
--code
if ( mem(0) >= mem(1) ){ out0(0);}else{ out1(0)}
#df Out left if number above or equals value, else out right
#i0 Call 
#i1 Set value to compare
#o0 Out
<=
8
--decl
inp(2); outp(2);
--code
if ( mem(0) <= mem(1) ){ out0(0);}else{ out1(0)}
#df Out left if number below or equals value, else out right
#i0 Call 
#i1 Set value to compare
#o0 Out
==
8
--decl
inp(2); outp(2);
--code
if ( mem(0) == mem(1) ){ out0(0);}else{ out1(0)}
#df Out left if number equals value, else out right
#i0 Call 
#i1 Set value to compare
#o0 Out
zero
13
# [zero] output 0
#        
#                      |
#                    [zero]
#                      |
--decl
inp(1); outp(1)
--code
mem(0) =0
out0(0)
#df Out zero
#i0 Call 
#o0 Out
one
13
# [one] output 1
#        
#                      |
#                    [one]
#                      |
--decl
inp(1); outp(1)
--code
mem(0) =1
out0(0)
#df Out one
#i0 Call 
#o0 Out
sqrt
6
--decl
inp(1); outp(1);
--code
mem(0) = Math.sqrt(mem(0))
out0(0)
#df Output square root of a number
int
7
--decl
inp(1)
outp(1)
--code
mem(0)=parseInt(mem(0))
out0(0)
#df Convert string to integer
str
7
--decl
inp(1)
outp(1)
--code
mem(0)=mem(0).toString()
out0(0)
#df Convert value to string
sel
8
#df Output to one of its wire out if value received correspond
--decl
inp(1)
outp(1)
--code
for ( var i = 1 ; i < self.memory.length; i++){
if(self.memory[i] == mem(0)){self.O(i,i)}
}
gate
15
# [gate]  pass or block routine 
#            if second input above 0
#	          
#                      |    |
#                    [gate ]
#                      |   
--decl
inp(2)
outp(1)
--code
if (mem(1)==0){out0(0);}
#df Pass value if number equal zero
#i0 Call 
#i1 Set number
#o0 Out
onload
8
# [onload] bang when project open
#                      
#                    [onload]
#                      |
--decl
inp(0); outp(1)
#df Call when project load
#o0 Out
dec
17
# [dec] decrement its memory every time 
#        it is triggered
#                          set
#                      |  |
#                    [dec  ]
#                      |
--decl
inp(2)
outp(1)
memset(2)
--code
mem(1)-=1;
out0(1);
#df Decrement number each call 
#i0 Call
#i1 Set number
#o0 Out
tan
6
--decl
inp(1); outp(1);
--code
mem(0) = Math.tan(mem(0))
out0(0)
#df Output tangent of a number
linear
25
# [linear] linear ramping to value 
#       
#                      value    time
#                      |          |
#                    [linear      ]
#                      |
--decl
inp(2)
outp(1)
memset(5)
--code
if (mem(3) == true){mem(4)  = 0;return;}
mem(3) = true;
mem(4)  = 0
while ( mem(4) <= mem(1)) {
var amt = mem(4) / mem(1)
mem(2) = (1-amt )*mem(2)+amt*mem(0)
out0(2)
await wait(10)
mem(4)+=0.001
}
mem(3) = false;
#df Ramp to value
#i0 Set target value
#i1 Set speed
log
6
--decl
inp(1); outp(1);
--code
mem(0) = Math.log(mem(0))
out0(0)
#df Output natural log of a number
lerp
15
# [lerp] linear interpolation between 2 values
#                r      a     b  
#                |      |    |    
#              [lerp          ]
#                |
--decl
inp(3)
outp(1)
--code
mem(0) = (1 - mem(0)) * mem(1) + mem(0) * mem(2)
out0(0)
#df Out value between two numbers
#i0 Set ratio [0-1]
#i1 Set first value
#i2 Set second value
tab
18
# a tab just an array that can be displayed and set by interacting
#                              *  o  st
#                              |  |  |
#                              [tab  ] 
#                              |
#
--decl
inp(3)
outp(1)
memset(4)
mem(3)=new Array(50).fill(0);
--code
out0(3)
--ipf2
mem(3)[mem(1)] = mem(2)
#i0 Out value
#i1 Write index
#i2 Store value
$
11
#     [$] Bang memory 1
#                      | |
#                    [$  ]
#                      |
--decl
inp(2)
outp(1)
--code
out0(1)
#df Output a stored value
#i1 Set value
neg
7
--decl
inp(1)
outp(1)
--code
mem(0) = -mem(0)
out0(0)
#df Negate a value
abs
7
--decl
inp(1)
outp(1)
--code
mem(0) = Math.abs(mem(0))
out0(0)
#df Output absolute value
pi
8
# Output pi
--decl
inp(1)
outp(1)
--code
mem(0) = Math.PI
out0(0)
#df Output pi
msg
11
# [msg] pass a chain of characters.
#           Change the chain of characters as you do it for renaming blocks.
#                      |
#                    [msg]
#                      |
--decl
inp(1); outp(1);memset(2)
mem(1) = 'hello world'
--code
out0(1)
#df  Pass a chain of characters when user click on it
arr
8
--decl
inp(2)
outp(1)
--code
if (mem(0).length > mem(1)){mem(0)=mem(0)[mem(1)];}
out0(0)
#df Ouput element of an array
#i0 Set index
split
9
--decl
inp(2)
outp(1)
mem(1)=' '
--code
mem(0) = mem(0).split(mem(1))
out0(0)
#df Split chain of character
#i1 Set separator
len
7
--decl
inp(1)
outp(1)
--code
mem(0)=mem(0).length
out0(0)
#df Output length of an array
max
6
--decl
inp(2); outp(1);
--code
mem(0) = Math.max(mem(0),mem(1))
out0(0)
#df Output highest value from two number
comm
3
--decl
memset(1)
mem(1) = "comment"
float
7
--decl
inp(1)
outp(1)
--code
mem(0) = parseFloat(mem(0))
out0(0)
#df Convert a string to a float
ceil
7
--decl
inp(1)
outp(1)
--code
mem(0) = Math.ceil(mem(0))
out0(0)
#df Output highest integer from a float value
cos
7
--decl
inp(1)
outp(1)
--code
mem(0) = Math.cos(mem(0))
out0(0)
#df Output cosinus of a value
packstr
20
# packstr a number of values into a single string. number of input 
# bang at 0
# declare number of inputs using packstr 8 or packstr 16...
--decl
inp(1)
outp(1)
memset(2)
--code
mem(0)="";
for ( var i = 1; i < self.memory.length;i++){mem(0)+=mem(i)+" ";}
out0(0)
--arg
# access argument using arg
# we received arguments values.
var n = parseInt(arg)
n++;
inp(n)
#reinit memory
for ( var i = 0; i < self.memory.length;i++){mem(i)=0}
#df Pack a list of values into a single string
unpack
9
#df Unpack array and bang from multiple outputs
--decl
inp(1)
memset(2)
--code
for ( var i = 0; i < mem(0).length; i++){self.O_true(i,mem(0)[i]);}
--arg
var n = parseInt(arg)
outp(n)
sin
7
--decl
inp(1)
outp(1)
--code
mem(0) = Math.sin(mem(0))
out0(0)
#df Output sinus of a value
matrix
34
#a matrix of 4x4 is array[4] of array[4]. we can set value like 
#bang flush the matrix.
#df Output a matrix of mutliple dimension
--decl
outp(1)
memset(3)
self.matrix = new Array();
--code
var ctr = 1
for ( var y = 0 ; y < self.ySize; y++){
for ( var x = 0 ; x < self.xSize; x++){
self.matrix[y][x] = mem(ctr)
ctr++
}
}
mem(0) = self.matrix;
out0(0)
--arg
console.log("ctr : "+ argctr +" arg : " + arg)
#set up First dimension
if ( argctr == 1){
self.matrix = new Array(arg)
self.xSize = arg;
}
#Set up second dimension
if ( argctr == 2) {
var ctr = 0; 
for ( var i = 0; i < self.matrix.length; i++){
self.matrix[i] = new Array(arg);
ctr+=arg;
}
self.ySize = arg;
inp(ctr+3)
}
list
5
#df Store values in an array
#          r  wr  i
#          |  |   |
#          [list    ]
#          |
loopi
7
#df Bang its output a specific amount of time
--decl
inp(2)
outp(1)
--code
for ( var i = 0 ; i < mem(1); i++) {self.O_true(0,i);}
#i1 Set number of times
html
8
#df Request HTML content
--decl
inp(1)
outp(1)
--code
mem(0) =  await fetch(mem(0))
out0(0)
#i0 Set html link
htmltxt
7
#df Output text component of an HTML response
--decl
inp(1)
outp(1)
--code
mem(0) =  await mem(0).text();
out0(0)
pack
21
# pack a number of values into a single string. number of input 
# bang at 0
# declare number of inputs using packstr 8 or packstr 16...
--decl
inp(1)
outp(1)
memset(2)
--code
mem(0)=new Array();
for ( var i = 1; i < self.memory.length;i++){mem(0).push(mem(i))}
out0(0)
--arg
# access argument using arg
# we received arguments values.
console.log("received " + arg);
var n = parseInt(arg)
n++;
inp(n)
#reinit memory
for ( var i = 0; i < self.memory.length;i++){mem(i)=0}
#df Pack a list of values into a single array
