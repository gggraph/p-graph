62
bang
9
# [bang] can trigger output on mouse down 
#        & has visual effect on receiving data
#                      |
#                    [bang]
#                      |
--decl
inp(1); outp(1)
--code
out0(0)
clock
12
# [clock] output its message after one second
#         
#                     *   
#                     |     
#                [ clock  ]
#                     |
--decl
inp(1)
outp(1)
--code
await wait(1000)
out0(0)
color
13
# [color] set color for [pix] [fill] 
#            and other graphics box
#
#                  *  r  g b
#                  |  |  |  |
#                [   color  ]
#                     
--decl
inp(4)
outp(1)
--code
SetColor(mem(1),mem(2),mem(3))
out0(0)
fill
11
# [fill] clear display with current color 
#        
#                      |
#                    [fill]
#                      
--decl
inp(1)
outp(1)
--code
ClearScreen()
out0(0)
inc
13
# [inc] increment its memory every time 
#        it is triggered
#
#                      |  |
#                    [inc  ]
#                      |
--decl
inp(2)
outp(1)
memset(2)
--code
mem(1)+=1;
out0(1);
log
10
# [log] print its memory to browser
#         console
#
#                      |
#                    [log]
#                      
--decl
inp(1);outp(0);
--code
console.log(mem(0))
pix
11
# [pix] print a pixel on screen at position x and y
#       
#                *  x   y
#                |  |   |
#               [pix      ]
#                |
#
--decl
inp(3); outp(1)
--code
SetPixel(mem(1),mem(2))
pen
14
# [pen] set resolution of screen pixel 
#          printing command
#
#                  *  res 
#                  |   |   
#               [pen    ]
#                |
#
--decl
inp(2)
outp(1)
--code
SetPenWidth(mem(1))
out0(0)
pipe
13
# [pipe] output its message after a certain time
#         time set in input#2 is in ms
#                 *   time
#                 |     |
#                [ pipe  ]
#                     |
--decl
inp(2)
outp(1)
mem(1)=1000
--code
await wait(mem(1))
out0(0)
slider
6
# [slider] outputs integer with
#             special interaction
--decl
inp(1); outp(1);
--code
out0(0)
knob
7
# [knob] outputs integer with
#             special interaction
--decl
inp(1)
outp(1)
--code
out0(0)
number
7
# [slider] outputs integer with
#             a special display
--decl
inp(1)
outp(1)
--code
out0(0)
floor
11
# [floor] round a value to its lowest 
#
#                      |
#                    [floor]
#                      |
--decl
inp(1)
outp(1)
--code
mem(0) = Math.floor(mem(0))
out0(0)
/
12
# [ / ] divide a number with
#       divider pass in second entry
#
#	          q   d
#                      |  |
#                    [ /   ]
#                      |
--decl
inp(2); outp(1);
--code
mem(0) /= mem(1)
out0(0)
switch
11
# [switch] pass or block routine
#              on click, user can set to 0 or I
#	          
#                      |   
#                    [switch]
#                      |
--decl
inp(2)
outp(1)
--code
if (mem(1)==0){out0(0);}
rand
18
# [rand]  out a random number 
#            range can be set by passing
#            minimum value at entry 1
#            maximum value at entry 2
#
#                  *  m   mx
#                  |   |   |
#                [rand     ]
#                  |
--decl
inp(3)
outp(1)
mem(1)=0
mem(2)=200
--code
mem(0) = Math.random() * (mem(2)-mem(1))+ mem(1)
mem(0) = Math.floor(mem(0))
out0(0)
metro
7
--decl
inp(2)
outp(1)
mem(1) = 1000
--code
await wait(mem(1))
out0(0) 
+
5
--decl
inp(2); outp(1);
--code
mem(0) += mem(1)
out0(0)
-
5
--decl
inp(2); outp(1);
--code
mem(0) -= mem(1)
out0(0)
<
4
--decl
inp(2); outp(2);
--code
if ( mem(0) < mem(1) ){ out0(0);} else{ out1(0)}
>
4
--decl
inp(2); outp(2);
--code
if ( mem(0) > mem(1) ){ out0(0);}else{ out1(0)}
*
5
--decl
inp(2); outp(1);
--code
mem(0) *= mem(1)
out0(0)
>=
4
--decl
inp(2); outp(2);
--code
if ( mem(0) >= mem(1) ){ out0(0);}else{ out1(0)}
<=
4
--decl
inp(2); outp(2);
--code
if ( mem(0) <= mem(1) ){ out0(0);}else{ out1(0)}
==
4
--decl
inp(2); outp(2);
--code
if ( mem(0) == mem(1) ){ out0(0);}else{ out1(0)}
zero
10
# [zero] output 0
#        
#                      |
#                    [zero]
#                      |
--decl
inp(1); outp(1)
--code
mem(0) =0
out0(0)
one
10
# [one] output 1
#        
#                      |
#                    [one]
#                      |
--decl
inp(1); outp(1)
--code
mem(0) =1
out0(0)
hashmux32
75
# [hashmux32] output 32 values between 0 and 255
#                     from a hash string
#
#             |
#         [hashmux32                               ]
#             ||||||||||||||||||||||||||||||||
--decl
inp(1)
outp(32)
memset(32)
--code
mem(0) = HashMux32(mem(0))
mem(1) = mem(0)[1]
mem(2) = mem(0)[2]
mem(3) = mem(0)[3]
mem(4) = mem(0)[4]
mem(5) = mem(0)[5]
mem(6) = mem(0)[6]
mem(7) = mem(0)[7]
mem(8) = mem(0)[8]
mem(9) = mem(0)[9]
mem(10) = mem(0)[10]
mem(11) = mem(0)[11]
mem(12) = mem(0)[12]
mem(13) = mem(0)[13]
mem(14) = mem(0)[14]
mem(15) = mem(0)[15]
mem(16) = mem(0)[16]
mem(17) = mem(0)[17]
mem(18) = mem(0)[18]
mem(19) = mem(0)[19]
mem(20) = mem(0)[20]
mem(21) = mem(0)[21]
mem(22) = mem(0)[22]
mem(23) = mem(0)[23]
mem(24) = mem(0)[25]
mem(26) = mem(0)[26]
mem(27) = mem(0)[27]
mem(28) = mem(0)[28]
mem(29) = mem(0)[29]
mem(30) = mem(0)[30]
mem(31) = mem(0)[31]
mem(0) = mem(0)[0]
out0(0)
out1(1)
out2(2)
out3(3)
out4(4)
out5(5)
out6(6)
out7(7)
out8(8)
out9(9)
out10(10)
out11(11)
out12(12)
out13(13)
out14(14)
out15(15)
out16(16)
out17(17)
out18(18)
out19(19)
out20(20)
out21(21)
out22(22)
out23(23)
out24(24)
out25(25)
out26(26)
out27(27)
out28(28)
out29(29)
out30(30)
out31(31)
int
1
-
str
1
-
loadblock
13
# [loadblock] load a block at index in its internal memory 
#             then outputs it
#
#               index
#            |    |
#         [loadblock] 
#              |
--decl
inp(2)
outp(1)
--code
mem(0) = await Network.LoadBlockAtIndex(mem(1))
out0(0)
chainheight
12
# [chainheight] outputs blockchain length when triggered
#               as number
#
#               |
#         [chainheight]
#               |
--decl
inp(1)
outp(1)
--code
mem(0) = await Network.GetBlockchainLength()
out0(0)
blockhash
13
# [blockhash] output hash of a block as a string
#
#            block 
#              |    
#         [blockhash] 
#              |
--decl
inp(1)
outp(1)
--code
if ( mem(0).hash != 'undefined'){Network.SetInternalBlock(mem(0));}
mem(0) = Network.GetBlockHash();
out0(0)
blocktime
14
# [blocktime] output timestamp of a block as UNIX 
#	      timestamp
#
#            block 
#              |    
#         [blocktime] 
#              |
--decl
inp(1)
outp(1)
--code
if ( mem(0).timestamp != 'undefined'){Network.SetInternalBlock(mem(0));}
mem(0) = Network.GetTimeStamp();
out0(0)
blockheight
14
# [blockheight] output height of a block
#	        
#
#            block 
#              |    
#         [blockheight] 
#              |
--decl
inp(1)
outp(1)
--code
if ( mem(0).timestamp != 'undefined'){Network.SetInternalBlock(mem(0));}
mem(0) = Network.GetBlockIndex();
out0(0)
hashlerp
12
# [hashlerp] lerp hash value between 0 and 1
#                
#
#               |
#         [hashlerp  ]
#               |
--decl
inp(1)
outp(1)
--code
mem(0) = LerpHash(mem(0))
out0(0)
sel
2
# output 1 or 0 at output if match 
# output count depend of number of stuff 
gate
11
# [gate]  pass or block routine 
#            if second input
#	          
#                      |    |
#                    [gate ]
#                      |   
--decl
inp(2)
outp(1)
--code
if (mem(1)==0){out0(0);}
onload
8
# [onload] bang when project open
#                      
#                    [onload]
#                      |
--decl
inp(0); outp(1)
--code
out0(0)
dec
13
# [dec] decrement its memory every time 
#        it is triggered
#
#                      |  |
#                    [dec  ]
#                      |
--decl
inp(2)
outp(1)
memset(2)
--code
mem(1)-=1;
out0(1);
sin~
12
#
#
#
#
--decl
inp(3)
outp(1)
mem(1)=800
mem(2)=0.1
--code
mem(0) = new Wave("sine",mem(1),mem(2))
out0(0)
sqr~
12
#
#
#
#
--decl
inp(3)
outp(1)
mem(1)=800
mem(2)=0.1
--code
mem(0) = new Wave("square",mem(1),mem(2))
out0(0)
tri~
12
#
#
#
#
--decl
inp(3)
outp(1)
mem(1)=800
mem(2)=0.1
--code
mem(0) = new Wave("triangle",mem(1),mem(2))
out0(0)
saw~
12
#
#
#
#
--decl
inp(3)
outp(1)
mem(1)=800
mem(2)=0.1
--code
mem(0) = new Wave("sawtooth",mem(1),mem(2))
out0(0)
env~~
6
--decl
inp(4)
outp(1)
--code
mem(0).SetEnvelope(mem(1),mem(2),mem(3))
out0(0)
vib~~
6
--decl
inp(3)
outp(1)
--code
mem(0).SetVibrato(mem(1),mem(2))
out0(0)
del~
5
--decl
inp(4)
outp(0)
--code
SetDelay(mem(1),mem(2),mem(3))
~~
5
--decl
inp(1)
outp(0)
--code
SetVolume(mem(0))
osc~~
6
#
--decl
inp(1)
outp(0)
--code
PlayWave(mem(0))
lerp
7
# lerp value set value 0 a num between  0 and max -> mem(1)
--decl
inp(3)
outp(1)
--code
mem(0) = mem(1) * mem(2)
out0(0)
tab
15
# a tab just an array that can be displayed and set by interacting
#                              *  o  st
#                              |  |  |
#                              [tab  ] 
#                              |
#
--decl
inp(3)
outp(1)
memset(4)
mem(3)=new Array(50).fill(0);
--code
mem(3)[mem(2)] = mem(0)
mem(0) = mem(3)[mem(1)]
out0(0)
graph
13
# 2-dim tab that can be displayed and set by interacting
#                              *  xo   yo xi   yi
#                              |  |    |    |    | 
#                              [graph             ] 
#                              |      |
#
--decl
inp(5)
outp(2)
memset(6)
mem(5)=new Array()
--code
out0(0)
square
0
squarefill
0
rect
0
rectfill
0
circle
0
circlefill
0
line
0
arc
0
arcfill
0
$
6
## Bang its memory 1
--decl
inp(2)
outp(1)
--code
out0(1)
1
default
29
1657573263851
pipe
default
447
161
1
1
1657573300537
0
0
1657573272493
slider
default
548
116
1
1
1657573281371
0
1
14
1657573281371
* 10
default
486
237
1
1
1657573263851
1
0
1657573300537
bang
default
373
145
1
2
1657573304925
0
1657573263851
0
0
1657573304925
inc
default
366
217
1
1
1657573327759
0
0
1657573327759
number
default
366
281
1
4
1657573344720
0
1657573413185
1
1657573413185
0
1657573519158
0
1
17
1657573344720
> 48
default
386
344
2
1
1657573354103
0
1
1657573357560
0
0
1657573354103
bang
default
348
404
1
1
1657573369418
0
0
1657573357560
bang
default
474
404
1
0
0
1657573369418
zero
default
307
338
1
5
1657573304925
1
1657573380580
1
1657573380580
2
1657573380580
3
1657573380580
0
0
1657573380580
color
default
548
304
1
1
1657573401402
0
0
1657573401402
fill
default
559
363
1
0
0
1657573413185
tab
default
146
193
1
2
1657573436633
0
1657573558748
0
0
1657573436633
number
default
99
322
1
2
1657573453535
0
1657573474347
0
1
21
1657573453535
*
default
162
382
1
2
1657573664575
1
1657573664575
0
2
109.2
5.2
1657573474347
* 10
default
60
391
1
1
1657573489198
0
0
1657573489198
number
default
73
437
1
2
1657573503432
2
1657573503432
0
1
210
1657573503432
pix
default
71
519
1
0
0
1657573519158
* 10
default
128
453
1
1
1657573503432
1
0
1657573558748
one
default
27
211
1
1
1657573564462
0
0
1657573564462
* 255
default
31
275
1
4
1657573579996
1
1657573579996
2
1657573579996
3
1657573579996
0
0
1657573579996
color
default
19
336
1
0
0
1657573607424
knob
default
669
158
1
2
1657573615328
1
1657573615328
0
1
70
1657573615328
pen
default
686
271
1
0
0
1657573664575
sqr~
default
203
445
1
1
1657573682394
0
0
1657573682394
osc~~
default
239
500
0
0
1657573718071
slider
default
256
314
1
1
1657573737514
0
1
26
1657573737514
/ 5
default
190
331
1
1
1657573453535
1
0
1657573796805
onload
default
773
63
1
4
1657573272493
0
1657573300537
0
1657573607424
0
1657573718071
0
0
1
default
29
1657573263851
1657573272493
1657573281371
1657573300537
1657573304925
1657573327759
1657573344720
1657573354103
1657573357560
1657573369418
1657573380580
1657573401402
1657573413185
1657573436633
1657573489198
1657573474347
1657573503432
1657573519158
1657573564462
1657573558748
1657573579996
1657573607424
1657573615328
1657573664575
1657573682394
1657573453535
1657573718071
1657573737514
1657573796805
